<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ollama：零代码部署大模型，轻松玩转AI</title>
      <link href="//2025/02/22/ollama-local-model-deploy/"/>
      <url>//2025/02/22/ollama-local-model-deploy/</url>
      
        <content type="html"><![CDATA[<h2 id="Ollama：零代码部署大模型，轻松玩转AI"><a href="#Ollama：零代码部署大模型，轻松玩转AI" class="headerlink" title="Ollama：零代码部署大模型，轻松玩转AI"></a>Ollama：零代码部署大模型，轻松玩转AI</h2><h3 id="一、Ollama下载和安装"><a href="#一、Ollama下载和安装" class="headerlink" title="一、Ollama下载和安装"></a>一、Ollama下载和安装</h3><h4 id="1-ollama官网地址Ollama"><a href="#1-ollama官网地址Ollama" class="headerlink" title="1. ollama官网地址Ollama"></a>1. ollama官网地址<a href="https://ollama.com/">Ollama</a></h4><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222143712754.png" alt="image-20250222143712704"></p><h4 id="2-ollama下载"><a href="#2-ollama下载" class="headerlink" title="2.ollama下载"></a>2.ollama下载</h4><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222143740926.png" alt="image-20250222143740877"></p><p>根据自己需要部署的操作系统选择</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222143819026.png" alt="image-20250222143818974"></p><h4 id="3-Linux操作系统安装（此处以Rocky-Linux-v9-5为例）"><a href="#3-Linux操作系统安装（此处以Rocky-Linux-v9-5为例）" class="headerlink" title="3.Linux操作系统安装（此处以Rocky Linux v9.5为例）"></a>3.Linux操作系统安装（此处以Rocky Linux v9.5为例）</h4><ul><li><p>下载ollama</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222144026426.png" alt="image-20250222144026375"></p></li><li><p>执行复制命令，等待下载和安装结束</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">curl -fsSL https://ollama.com/install.sh | sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222144100052.png" alt="image-20250222144100032"></p><blockquote><p>安装结束后会出现如下内容，说明已经安装完成</p><p>⚠️⚠️⚠️由于本猿使用的linux服务器没有安装显卡（GPU），所以会出现如下的警告</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222160650109.png" alt="image-20250222160650087"></p></li><li><p>校验是否安装成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 打开cmd命令行界面，快捷键 Win+Rollama -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>执行后会看到如下的结果</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222160905789.png" alt="image-20250222160905771"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 输入如下命令查看是否正常运行sudo systemctl status ollama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>出现如下结果则说明正常运行</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222161017860.png" alt="image-20250222161017832"></p></li><li><p>修改模型保存路径（根据自己的目录空间大小决定，如果空间足够充足可以不进行调整）</p><ul><li><p>编辑ollama.service文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 编辑/etc/systemd/system/ollama.service文件sudo vim /etc/systemd/system/ollama.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在[Service]标记下，添加如下内容，如下图所示（如果实在不理解什么涵义，直接添加下面内容就可以）</p><blockquote><p>模型变更文件夹创建</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 执行命令创建自定义模型保存目录sudo mkdir -p /opt/ollama/models<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>根据需求添加模型文件保存路径配置</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 修改Ollama的host地址，默认是127.0.0.1，只能本地访问，无法在其他同网络电脑上访问Environment="OLLAMA_HOST=0.0.0.0"# 跨域处理Environment="OLLAMA_ORIGINS=*"# 模型保存目录更换,此处/opt/ollama/models文件夹根据自己需求变化创建，如果不需要变更模型保存文件夹，则不需要配置Environment="OLLAMA_MODELS=/opt/ollama/models"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222162331061.png" alt="image-20250222162331030"></p></li><li><p>保存该文件内容</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 按下Esc键# 同时按下`Shift`和`:`# 输入wq回车wq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222162624227.png" alt="image-20250222162624206"></p></li><li><p>重新加载刷新配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 刷新配置sudo systemctl daemon-reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>重启ollama</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 重启ollamasudo systemctl restart ollama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果需要每次系统重启，ollama随机启动运行，在执行如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 配置Ollama服务随机启动sudo systemctl enable ollama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>校验是否重启成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sudo systemctl status ollama<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果出现如下情况，则说明失败</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222163625913.png" alt="image-20250222163625890"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 执行如下命令，检查服务启动失败原因sudo journalctl -u ollama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>我们会发现此处提示报错原因是没有权限在之前创建的模型的目录下创建文件夹</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222163611834.png" alt="image-20250222163611783"></p><blockquote><p>给创建的模型文件夹授权</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 将目标路径的所属用户和组改为root用户sudo chown -R root:root /opt/ollama/models# 将文件夹权限更换为777sudo chmod -R 777 /opt/ollama/models# 再次执行如下重启命令sudo systemctl restart ollama# 查看启动状态sudo systemctl status ollama<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果出现如下情况，则说明启动成功</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222164259042.png" alt="image-20250222164259004"></p></li></ul></li><li><p>检验模型目录是否切换成功</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 执行如下命令查看是否生成blobs文件夹sudo ll /opt/ollama/models<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222165254397.png" alt="image-20250222165254372"></p></li><li><p>同局域网访问，检验是否可以，在另一台电脑浏览器中访问<a href="http://192.168.1.72:11434/%EF%BC%8C%E5%9C%B0%E5%9D%80%E6%A0%B9%E6%8D%AE%E8%87%AA%E5%B7%B1%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%B0%E5%9D%80%E6%9B%B4%E6%8D%A2">http://192.168.1.72:11434/，地址根据自己服务器地址更换</a></p><blockquote><p>如果出现如下界面，则说明可以访问成功</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222165752926.png" alt="image-20250222165752890"></p><blockquote><p>如果还是不可以，请检查是否服务器防火墙没有开放该端口</p><p>本猿使用的服务器操作系统(Rocky Linux v9.5)端口开放方法如下：</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 开放端口sudo firewall-cmd --zone=public --permanent --add-port=11434/tcp# 刷新系统配置，使其生效sudo firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li></li></ul><h4 id="4-Windows操作系统安装"><a href="#4-Windows操作系统安装" class="headerlink" title="4.Windows操作系统安装"></a>4.Windows操作系统安装</h4><ul><li><p>下载ollama</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222152149631.png" alt="image-20250222152149571"></p></li><li><p>双击OllamaSetup.exe文件安装，会出现如下界面</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222152252222.png" alt="image-20250222152252194"></p></li><li><p>点击Install进行安装</p><blockquote><p>🎗️🎗️🎗️说明:</p><p>此处无法选择安装目录，默认安装路径为 C:\Users\<code>用户名</code>\AppData\Local\Programs</p><p>此处<code>用户名</code>根据用户具体的计算机名称调整</p></blockquote></li><li><p>校验是否安装成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打开cmd命令行界面，快捷键 Win+R</span>ollama -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>看到如下结果说明ollama已经安装成功</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222153122026.png" alt="image-20250222153122003"></p><blockquote><p>或者查看任务栏中是否存在如下图标，如果存在说明安装成功</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222153315547.png" alt="image-20250222153315526"></p><blockquote><p>也可以在浏览器中输入如下地址<a href="http://127.0.0.1:11434/%E8%AE%BF%E9%97%AE%EF%BC%8C%E5%87%BA%E7%8E%B0%E5%A6%82%E4%B8%8B%E5%86%85%E5%AE%B9%E8%AF%B4%E6%98%8E%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F">http://127.0.0.1:11434/访问，出现如下内容说明安装成功</a></p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222153736131.png" alt="image-20250222153736110"></p></li><li><p>修改模型保存路径（根据自己的目录空间大小决定，如果空间足够充足可以不进行调整）</p><ul><li>进入系统设置界面，滚动页面翻到最下方，选择系统信息</li></ul><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222153931637.png" alt="image-20250222153931597"></p><ul><li><p>选择高级系统设置</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222154116824.png" alt="image-20250222154116797"></p></li><li><p>点击环境变量</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222154140643.png" alt="image-20250222154140618"></p></li><li><p>新建用户环境变量</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222155324484.png" alt="image-20250222155324451"></p></li><li><p>添加环境变量信息，然后一路确定下去就可以了</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222155446088.png" alt="image-20250222155446065"></p><blockquote><p>🎗️🎗️🎗️说明：</p><ul><li>模型路径修改，配置内容如下：<ul><li>变量名：OLLAMA_MODELS</li><li>变量值：H:\ollama\models（根据自己的目录更换，此处是本猿使用的路径）</li></ul></li><li>如果还需要给局域网其他电脑使用，需要添加如下两个配置<ul><li>添加OLLAMA_HOST<ul><li>变量名：OLLAMA_HOST</li><li>变量值：0.0.0.0</li></ul></li><li>添加OLLAMA_ORIGINS<ul><li>变量名：OLLAMA_ORIGINS</li><li>变量值：*</li></ul></li></ul></li></ul></blockquote></li><li><p>重启ollama工具，在任务中找到ollama图标，然后右击鼠标右键，点击Quit Ollama</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222155936776.png" alt="image-20250222155936754"></p></li><li><p>检查模型保存文件目录是否变更</p><blockquote><p>ollama原默认模型保存路径C:\Users\用户名\.ollama\models</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222160505397.png" alt="image-20250222160505367"></p><blockquote><p>修改后会发现，在更换的目录下多了一个blobs文件夹，说明已经更换成功</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222160253810.png" alt="image-20250222160253785"></p></li></ul></li><li><p>5.模型下载</p><blockquote><p>下载模型，此处以deepseek r1 7B为例</p></blockquote><ul><li><p>首先到ollama官方查找模型</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222170301868.png" alt="image-20250222170301802"></p></li><li><p>此处我们选择deepseek-r1</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222170823047.png" alt="image-20250222170822986"></p></li><li><p>官方提供的命令是直接下载并运行模型</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ollama run deepseek-r1:7b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>下载模型状态如下</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222171012539.png" alt="image-20250222171012512"></p><blockquote><p>下载完成自动运行模型</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222171800550.png" alt="image-20250222171800521"></p><blockquote><p>进行提问</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222171913518.png" alt="image-20250222171913484"></p></li><li><p>如果想不直接运行仅拉取下载模型，执行如下命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">ollama pull deepseek-r1:7b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><h4 id="5-使用图形化界面访问部署好的模型，此处使用AnythingLLM"><a href="#5-使用图形化界面访问部署好的模型，此处使用AnythingLLM" class="headerlink" title="5.使用图形化界面访问部署好的模型，此处使用AnythingLLM"></a>5.使用图形化界面访问部署好的模型，此处使用AnythingLLM</h4><ul><li>下载AnythingLLM，<a href="https://anythingllm.com/">https://anythingllm.com/</a></li></ul><p>  <img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222172320975.png" alt="image-20250222172320903"></p><blockquote><p>根据自己的电脑系统选择适合的安装包</p></blockquote><p>  <img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173034058.png" alt="image-20250222173033987"></p><ul><li><p>双击AnythingLLMDesktop.exe进行安装，根据自己喜好选择安装目录</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222172530521.png" alt="image-20250222172530489"></p></li><li><p>配置AnyThingLLM</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173219282.png" alt="image-20250222173219237"></p></li><li><p>创建工作区</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173313237.png" alt="image-20250222173313191"></p></li><li><p>配置模型连接方式以及默认使用什么模型</p><blockquote><p>选择聊天设置</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173519243.png" alt="image-20250222173519198"></p><blockquote><p>选择工作区LLM提供者</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173554357.png" alt="image-20250222173554301"></p><blockquote><p>选择提供商</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173622452.png" alt="image-20250222173622400"></p><blockquote><p>在列表中选择Ollama</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173700498.png" alt="image-20250222173700443"></p><blockquote><p>配置Ollama服务连接地址</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222173756310.png" alt="image-20250222173756261"></p><blockquote><p>此处地址根据实际情况选择</p><ul><li>如果是本地服务（AnythingLLM工具和Ollama在同一台电脑上），填入<a href="http://127.0.0.1:11434/">http://127.0.0.1:11434</a></li><li>如果是非本地服务（AnythingLLM工具和Ollama不在同一台电脑上），填入http://服务器IP:11434</li></ul><p>此处本猿以服务器部署的地址来配置</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222174143980.png" alt="image-20250222174143936"></p><blockquote><p>配置页翻到最下方，更新工作区配置</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222174253049.png" alt="image-20250222174253002"></p></li><li><p>回到工作区界面</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222174409046.png" alt="image-20250222174408999"></p></li><li><p>输入聊天内容进行聊天</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222174503643.png" alt="image-20250222174503598"></p></li><li><p>结果反馈</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222174601409.png" alt="image-20250222174601334"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>还在自己辛苦编写分布式 ID 生成工具？这款神器让你瞬间 “真香”！</title>
      <link href="//2025/02/17/flake-id-generate-with-hazelcast-for-local-or-server/"/>
      <url>//2025/02/17/flake-id-generate-with-hazelcast-for-local-or-server/</url>
      
        <content type="html"><![CDATA[<h2 id="还在自己辛苦编写分布式-ID-生成工具？这款神器让你瞬间-“真香”"><a href="#还在自己辛苦编写分布式-ID-生成工具？这款神器让你瞬间-“真香”" class="headerlink" title="还在自己辛苦编写分布式 ID 生成工具？这款神器让你瞬间 “真香”"></a>还在自己辛苦编写分布式 ID 生成工具？这款神器让你瞬间 “真香”</h2><blockquote><p>在日常开发中，我们通常需要自行实现分布式ID生成，但这种方式往往伴随着诸多问题，如性能瓶颈、重复ID风险等。为了解决这些问题，我们可以引入<code> Hazelcast</code>，它提供了高效、可靠的分布式ID生成机制，帮助我们避免常见的陷阱，简化开发流程，提升系统稳定性。</p></blockquote><h4 id="一、基础依赖引入"><a href="#一、基础依赖引入" class="headerlink" title="一、基础依赖引入"></a>一、基础依赖引入</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>com.hazelcast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>hazelcast<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>5.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="二、本地集成版本"><a href="#二、本地集成版本" class="headerlink" title="二、本地集成版本"></a>二、本地集成版本</h4><ul><li><p>添加Sprringboot配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HazelcastClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ClientConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ClientFlakeIdGeneratorConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">HazelcastInstance</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">;</span><span class="token comment">/** * Hazelcast配置类 * 创建flakeId生成器配置 * 预取数量为10，预取有效期10分钟 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HazelcastConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HazelcastInstance</span> <span class="token function">hazelcastInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建配置</span>        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置集群名称</span>        config<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span><span class="token string">"FlakeGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建flakeId生成器配置</span>        <span class="token class-name">FlakeIdGeneratorConfig</span> flakeIdGeneratorConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlakeIdGeneratorConfig</span><span class="token punctuation">(</span><span class="token string">"flake-id-generator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 预取数量</span>        flakeIdGeneratorConfig<span class="token punctuation">.</span><span class="token function">setPrefetchCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 预取有效期</span>        flakeIdGeneratorConfig<span class="token punctuation">.</span><span class="token function">setPrefetchValidityMillis</span><span class="token punctuation">(</span>MINUTES<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加配置</span>        config<span class="token punctuation">.</span><span class="token function">addFlakeIdGeneratorConfig</span><span class="token punctuation">(</span>flakeIdGeneratorConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建客户端</span>        <span class="token keyword">return</span> <span class="token class-name">Hazelcast</span><span class="token punctuation">.</span><span class="token function">newHazelcastInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加访问接口类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">HazelcastInstance</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>flakeidgen<span class="token punctuation">.</span></span><span class="token class-name">FlakeIdGenerator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">jakarta<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hazelcast"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HazelcastController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">HazelcastInstance</span> hazelcastInstance<span class="token punctuation">;</span>    <span class="token comment">/**     * 生成10个flakeId     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/gen"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> flakeIds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FlakeIdGenerator</span> flakeIdGenerator <span class="token operator">=</span> hazelcastInstance<span class="token punctuation">.</span><span class="token function">getFlakeIdGenerator</span><span class="token punctuation">(</span><span class="token string">"flake-id-generator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            flakeIds<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>flakeIdGenerator<span class="token punctuation">.</span><span class="token function">newId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> flakeIds<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器访问<a href="http://127.0.0.1:8080/hazelcast/gen">http://127.0.0.1:8080/hazelcast/gen</a></p><blockquote><p>生成数据结果如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222231534468.png" alt="image-20250222231534445"></p></li></ul><h4 id="三、服务器部署版"><a href="#三、服务器部署版" class="headerlink" title="三、服务器部署版"></a>三、服务器部署版</h4><blockquote><p>说明：此处操作系统以Rocky Linux v9.5为例</p></blockquote><ul><li><p><code>Hazelcast</code>部署</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 检查系统是否安装wget组件wget -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>出现如下内容，打印出wget版本，说明已经安装</p><p>如果没有安装则执行，sudo yum install -y wget</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222232016912.png" alt="image-20250222232016880"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 此处我们以rpm包的方式安装# 下载hazelcast的rpm仓库依赖文件wget https://repository.hazelcast.com/rpm/stable/hazelcast-rpm-stable.repo -O hazelcast-rpm-stable.repo# 移动文件到/etc/yum.repos.d/文件夹下sudo mv hazelcast-rpm-stable.repo /etc/yum.repos.d/# 安装hazelcastsudo yum install -y hazelcast-5.5.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>检查<code>Hzelcast</code>是否安装成功</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 检查是否安装成功，出现下图内容，则说明已经成功hz -V<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250223001957231.png" alt="image-20250223001957204"></p><blockquote><p>修改安装后的配置文件内容/usr/lib/hazelcast/config/hazelcast.xml</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hazelcast</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.hazelcast.com/schema/config<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.hazelcast.com/schema/config           http://www.hazelcast.com/schema/config/hazelcast-config-5.5.xsd<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token comment">&lt;!-- 需要修改的内容，集群名称，对应HazelcastServerConfig中的集群名称 --&gt;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cluster-name</span><span class="token punctuation">&gt;</span></span>FlakeGenerator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>cluster-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network</span><span class="token punctuation">&gt;</span></span>        <span class="token comment">&lt;!-- 修改interface标签中IP地址 --&gt;</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interfaces</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>interface</span><span class="token punctuation">&gt;</span></span>192.168.1.72<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interface</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>interfaces</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>join</span><span class="token punctuation">&gt;</span></span>             <span class="token comment">&lt;!-- 修改member标签中IP地址 --&gt;</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tcp-ip</span> <span class="token attr-name">enabled</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member-list</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>member</span><span class="token punctuation">&gt;</span></span>192.168.1.72<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>member-list</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tcp-ip</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>join</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hazelcast</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加Sprringboot配置类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token class-name">HazelcastClient</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ClientConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ClientFlakeIdGeneratorConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>client<span class="token punctuation">.</span>config<span class="token punctuation">.</span></span><span class="token class-name">ClientNetworkConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>hazelcast<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">HazelcastInstance</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Bean</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MINUTES<span class="token punctuation">;</span><span class="token comment">/** * Hazelcast配置类 * 创建flakeId生成器配置 * 预取数量为10，预取有效期10分钟 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HazelcastServerConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">HazelcastInstance</span> <span class="token function">hazelcastInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 创建配置</span>        <span class="token class-name">ClientConfig</span> clientConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置集群名称</span>        clientConfig<span class="token punctuation">.</span><span class="token function">setClusterName</span><span class="token punctuation">(</span><span class="token string">"FlakeGenerator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建flakeId生成器配置</span>        <span class="token class-name">ClientFlakeIdGeneratorConfig</span> clientFlakeIdGeneratorConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientFlakeIdGeneratorConfig</span><span class="token punctuation">(</span><span class="token string">"flake-id-generator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 预取数量</span>        clientFlakeIdGeneratorConfig<span class="token punctuation">.</span><span class="token function">setPrefetchCount</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 预取有效期</span>        clientFlakeIdGeneratorConfig<span class="token punctuation">.</span><span class="token function">setPrefetchValidityMillis</span><span class="token punctuation">(</span>MINUTES<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 添加配置</span>        clientConfig<span class="token punctuation">.</span><span class="token function">addFlakeIdGeneratorConfig</span><span class="token punctuation">(</span>clientFlakeIdGeneratorConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置网络配置</span>        <span class="token class-name">ClientNetworkConfig</span> clientNetworkConfig <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClientNetworkConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置集群地址</span>        clientNetworkConfig<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"192.168.1.72:5701"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clientConfig<span class="token punctuation">.</span><span class="token function">setNetworkConfig</span><span class="token punctuation">(</span>clientNetworkConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建客户端</span>        <span class="token keyword">return</span> <span class="token class-name">HazelcastClient</span><span class="token punctuation">.</span><span class="token function">newHazelcastClient</span><span class="token punctuation">(</span>clientConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加访问接口类</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">import com.hazelcast.core.HazelcastInstance;import com.hazelcast.flakeidgen.FlakeIdGenerator;import jakarta.annotation.Resource;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.util.ArrayList;import java.util.List;@RestController@RequestMapping("/hazelcast")public class HazelcastController {    @Resource    private HazelcastInstance hazelcastInstance;    /**     * 生成10个flakeId     */    @RequestMapping("/gen")    public List&lt;Long&gt; gen() {        List&lt;Long&gt; flakeIds = new ArrayList&lt;&gt;(10);        FlakeIdGenerator flakeIdGenerator = hazelcastInstance.getFlakeIdGenerator("flake-id-generator");        for (int i = 0; i &lt; 10; i++) {            flakeIds.add(flakeIdGenerator.newId());        }        return flakeIds;    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>浏览器访问<a href="http://127.0.0.1:8080/hazelcast/gen">http://127.0.0.1:8080/hazelcast/gen</a></p><blockquote><p>生成数据结果如下：</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250223005010505.png" alt="image-20250223005010478"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LM Studio模型本地化部署：快速入门指南！</title>
      <link href="//2025/02/16/lmstudio-local-model-deploy/"/>
      <url>//2025/02/16/lmstudio-local-model-deploy/</url>
      
        <content type="html"><![CDATA[<h1 id="LM-Studio模型本地化部署：快速入门指南！"><a href="#LM-Studio模型本地化部署：快速入门指南！" class="headerlink" title="LM Studio模型本地化部署：快速入门指南！"></a>LM Studio模型本地化部署：快速入门指南！</h1><blockquote><p>特殊说明：</p><p>huggingface.co网站需要科学上网才可访问</p></blockquote><ul><li><p>下载LM Studio，地址：<a href="https://lmstudio.ai/">LM Studio - Discover, download, and run local LLMs</a></p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212131407.png" alt="image-20250222212131369"></p></li><li><p>根据自己自己操作系统下载对应的版本，此处以windows环境为例，下载如下版本：</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212201595.png" alt="image-20250222212201573"></p></li><li><p>安装LM Studio</p><ul><li><p>双击LM-Studio-0.3.9-6-x64.exe</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212236095.png" alt="image-20250222212236070"></p></li><li><p>根据自己的喜好，选择安装目录</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212302810.png" alt="image-20250222212302786"></p></li><li><p>点击安装，等待安装完成</p></li><li><p>安装完成后，点击完成，如果想立即使用，则不要去掉勾选项（运行LM Studio）</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212325327.png" alt="image-20250222212325304"></p></li></ul></li><li><p>LM Studio 使用</p><ul><li><p>打开LM Studio ,默认情况是没有加载任何模型，需要下载模型</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212432716.png" alt="image-20250222212432670"></p></li><li><p>首先根据自己的喜好调整模型保存路径</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212447137.png" alt="image-20250222212447092"></p></li><li><p>下载模型</p><ul><li><p>方式一：到<a href="https://huggingface.co/">Hugging Face – The AI community building the future.</a>下载开源模型</p><ul><li><p>进入Hugging Face网站</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212506350.png" alt="image-20250222212506288"></p></li><li><p>搜索模型(deepseek r1)，选择See all results for “deepseek r1 7b gguf”</p><blockquote><p>说明：LM Studio 需要加载的模型文件要为gguf结尾的文件</p><p>我们还会看到一些safetensors结尾的文件，这种格式的文件，需要转换成gguf格式的文件才可以在LM Studio中使用</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212603226.png" alt="image-20250222212603191"></p></li><li><p>搜索结果如下，筛选出最后欢迎或者下载量最大的即可</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212621528.png" alt="image-20250222212621422"></p></li><li><p>从上面的结果选择其中一个，此处我选择lmstudio-community下面的模型，选择后我们会看到如下结果</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212637184.png" alt="image-20250222212637138"></p></li><li><p>选择Files and versions，下载对应的模型文件即可</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212653419.png" alt="image-20250222212653376"></p></li><li><p>在前面配置好的模型保存路径文件夹下创建模型保存的目录，如下所示：</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212709441.png" alt="image-20250222212709422"></p><blockquote><p>说明：此处作者使用的是在H:\models这个路径</p><p>我们需要根据下载的模型创建如下的目录</p><p>首先我们需要在H:\models目录下创建lmstudio-community文件夹</p><p>然后再在H:\models\lmstudio-community目录下创建DeepSeek-R1-Distill-Qwen-7B-GGUF文件夹</p><p>最后将下载好的模型放在H:\models\lmstudio-community\DeepSeek-R1-Distill-Qwen-7B-GGUF</p><p>lmstudio-community是指发布者</p><p>DeepSeek-R1-Distill-Qwen-7B-GGUF是指模型名称</p></blockquote><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212725201.png" alt="image-20250222212725180"></p></li></ul></li><li><p>方式二：在LM Studio工具中下载开源模型</p><ul><li><p>选择发现标签（放大镜图标），会弹出如下选择框</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212738345.png" alt="image-20250216193944111"></p></li><li><p>根据上面的操作结果，我们会发现，选择了模型但是右侧提示No result found！！！</p><blockquote><p>此处是因为下载源在国内无法正常使用</p></blockquote></li><li><p>修改模型下载源</p><blockquote><p>说明：此处我们需要修改两个文件，首先进入LM Studio的安装目录，此处以作者的为例，我的安装目录在D:\Develop\tools\LM Studio</p><p>1.第一个文件，D:\Develop\tools\LM Studio\resources\app.webpack\main\index.js</p><p>2.第二个文件，D:\Develop\tools\LM Studio\resources\app.webpack\renderer\main_window.js</p><p>将这两个文件中所有的<code>huggingface.co</code>替换为<code>hf-mirror.com</code></p></blockquote></li><li><p>关闭LM Studio，重新打开，我们会发现，刚刚无法下载的模型，均可以下载</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212747630.png" alt="image-20250216194907340"></p></li></ul></li><li><p>加载模型，调用模型进行使用</p><ul><li><p>回到聊天界面，选择模型加载</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212755026.png" alt="image-20250216195034768"></p></li><li><p>选择加在模型，会列出所有本地下载好的模型，此处我们使用示例中的模型</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212802893.png" alt="image-20250216195156978"></p></li><li><p>加载模型</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212810356.png" alt="image-20250216195217313"></p></li><li><p>创建聊天</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212815920.png" alt="image-20250216195238424"></p></li><li><p>在此处输入需要对话的内容 </p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212833899.png" alt="image-20250216195412268"></p></li><li><p>反馈结果</p><p><img src="https://raw.githubusercontent.com/Nicholas2015/Pictures/ollama/20250222212842068.png" alt="image-20250216195541431"></p></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解锁模型魔法：你需要的基础知识秘籍</title>
      <link href="//2025/02/15/llm-model-basic-introduction/"/>
      <url>//2025/02/15/llm-model-basic-introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="解锁模型魔法：你需要的基础知识秘籍"><a href="#解锁模型魔法：你需要的基础知识秘籍" class="headerlink" title="解锁模型魔法：你需要的基础知识秘籍"></a>解锁模型魔法：你需要的基础知识秘籍</h2><blockquote><p>我们经常会看到模型的名字中会带有0.5B、7B、32B等等，其中B表示是Billion(十亿)个参数</p></blockquote><table><thead><tr><th>模型大小</th><th>参数数量</th></tr></thead><tbody><tr><td>0.5B</td><td>5亿</td></tr><tr><td>1.5B</td><td>15亿</td></tr><tr><td>7B</td><td>70亿</td></tr><tr><td>13B</td><td>130亿</td></tr><tr><td>32B</td><td>320亿</td></tr><tr><td>70B</td><td>700亿</td></tr></tbody></table><h4 id="计算机基础知识，内存-磁盘存储，基本单位为字节（byte）"><a href="#计算机基础知识，内存-磁盘存储，基本单位为字节（byte）" class="headerlink" title="计算机基础知识，内存/磁盘存储，基本单位为字节（byte）"></a>计算机基础知识，内存/磁盘存储，基本单位为字节（byte）</h4><table><thead><tr><th>单位</th><th>换算</th></tr></thead><tbody><tr><td>KB</td><td>1 KB=1024 Bytes</td></tr><tr><td>MB</td><td>1 MB=1024 KB</td></tr><tr><td>GB</td><td>1 GB=1024 MB</td></tr><tr><td>TB</td><td>1 TB=1024 GB</td></tr></tbody></table><h4 id="训练模型参数类型"><a href="#训练模型参数类型" class="headerlink" title="训练模型参数类型"></a>训练模型参数类型</h4><table><thead><tr><th>参数类型</th><th>占用字节</th><th>说明</th></tr></thead><tbody><tr><td>float</td><td>4 bytes</td><td>32位浮点数</td></tr><tr><td>half/BF16</td><td>2 bytes</td><td>16位浮点数</td></tr><tr><td>int8</td><td>1 bytes</td><td>8位整数</td></tr><tr><td>int4</td><td>0.5 bytes</td><td>4位整数</td></tr></tbody></table><h4 id="评估内存使用需求"><a href="#评估内存使用需求" class="headerlink" title="评估内存使用需求"></a>评估内存使用需求</h4><blockquote><p>此处以Qwen2.5-VL-7B-Instruct-bf16为例</p></blockquote><ol><li>7B = 7 Billion 70亿个参数</li><li>BF16 = 使用参数类型为half/BF16，占用2个字节</li></ol><p>计算：需要占用字节数：7,000,000,000 * 2 = 14,000,000,000 bytes 也就是140亿字节</p><blockquote><p>换算成占用多少GB</p></blockquote><p>= 14 * 1000 * 1000 * 1000 / 1024 / 1024 / 1024 = 14 *  </p><p>≈ 14 * 0.93 </p><p>≈ 13.02 GB</p><blockquote><p>说明：<br>$$<br>1000 * 1000 * 1000 / 1024 / 1024 / 1024 = (1000 / 1024)^3 ≈ 0.93<br>$$</p></blockquote><h4 id="评估模型训练需求"><a href="#评估模型训练需求" class="headerlink" title="评估模型训练需求"></a>评估模型训练需求</h4><blockquote><p>说明：</p><p>为了确保模型训练的精准度，一般参数类型选择float类型，如果硬件性能稍微差点，也可以选择half/BF16，但是不能选择Int8和Int4。</p><p>由于模型训练收到反向传播算法、Adam优化算法以及Transformer架构等因素的影响，训练所需的内存一般是LLM（Large Language Model）内存需求的3~4倍。</p></blockquote><h5 id="例如：训练Qwen-7B模型所需的内存计算（保守估算按照4倍的方案来计算）"><a href="#例如：训练Qwen-7B模型所需的内存计算（保守估算按照4倍的方案来计算）" class="headerlink" title="例如：训练Qwen-7B模型所需的内存计算（保守估算按照4倍的方案来计算）"></a>例如：训练Qwen-7B模型所需的内存计算（保守估算按照4倍的方案来计算）</h5><ol><li>使用Float参数类型来计算，7B * 4 * 4 ≈ 104GB</li><li>使用half/BF16参数类型计算，7B * 2 * 4 ≈ 52GB</li></ol>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch集群安装与部署</title>
      <link href="//2023/01/25/elasticsearch-cluster-install/"/>
      <url>//2023/01/25/elasticsearch-cluster-install/</url>
      
        <content type="html"><![CDATA[<h1 id="Elasticsearch部署"><a href="#Elasticsearch部署" class="headerlink" title="Elasticsearch部署"></a>Elasticsearch部署</h1><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><ol><li>物理机配置</li></ol><table><thead><tr><th>数量</th><th align="left">配置</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>6</td><td align="left">处理器：56核心<br>内存：512GB<br>系统盘：1T * 2 SSD固态盘<br>数据盘：8T * 10机械盘</td><td>Linux CentOS 7.5</td><td>192.168.70.130<br>192.168.70.131<br>192.168.70.132<br>192.168.70.133<br>192.168.70.134<br>192.168.70.135</td></tr></tbody></table><ol start="2"><li>软件信息<blockquote><p>JDK版本：1.8<br><br>Elasticsearch版本：7.0</p></blockquote></li></ol><h3 id="二、搭建环境"><a href="#二、搭建环境" class="headerlink" title="二、搭建环境"></a>二、搭建环境</h3><ol><li>软件环境信息<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建目录为elasticsearch安装做准备$ mkdir -p /opt/elastic$ mkdir -p /opt/elastic/node-01$ mkdir -p /opt/elastic/node-02$ mkdir -p /opt/elastic/node-03$ mkdir -p /opt/elastic/node-04$ mkdir -p /opt/elastic/node-05$ mkdir -p /opt/elastic/node-client# 创建目录用于下载文件，可以根据自己习惯操作$ mkdir -p /home/software$ cd /home/software# 下载JDK$ wget https://download.oracle.com/otn/java/jdk/8u351-b10/10e8cce67c7843478f41411b7003171c/jdk-8u351-linux-x64.tar.gz?AuthParam=1670730205_7f2b9f799e119cf35d27add28a8187cf# 解压jdk文件 tar$ tar -zxvf jdk-8u351-linux-x64.tar.gz# 查看当前机器是否安装过jdk$ rpm -qa |grep java# 删除以java开头的文件$ rpm -e --nodeps java*# 删除完毕后可以输入以下命令确认是否还存在，如果提示command找不到，说明移除完成$ java -version# 配置JDK$ vim /etc/profile# 在最后一行添加如下内容export JAVA_HOME=/home/local/java/jdk1.8.0_271export PATH=$JAVA_HOME/bin:$PATHexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar# 保存内容按下esc键，操作:wq保存文件内容# 重新加载文件，使其生效$ source /etc/profile# 验证安装是否成功，如果命令正常说明已经成功$ java -version # 下载elasticsearch$ wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.0.0-linux-x86_64.tar.gz# 解压Elasticsearch$ tar -zxvf elasticsearch-7.0.0-linux-x86_64.tar.gz$ cp /home/software/elasticsearch /opt/elastic/node-01$ cp /home/software/elasticsearch /opt/elastic/node-02$ cp /home/software/elasticsearch /opt/elastic/node-03$ cp /home/software/elasticsearch /opt/elastic/node-04$ cp /home/software/elasticsearch /opt/elastic/node-05$ cp /home/software/elasticsearch /opt/elastic/node-client<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>节点分配<br><br>node-01为即是master节点也是data节点<br><br>node-02~node-05为data节点<br><br>node-client为客户端节点，不充当master节点和data节点，仅作为对外客户端连接<br><br>说明：<br><br>此处client可以省略，也可以放到node-01上<br></p></blockquote></li></ol><ul><li>客户端节点配置<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 这种组合表示这个节点即不会成为主节点，也不会存储数据，这个节点的意义是作为一个client(客户端)节点，主要是针对海量请求的时候可以进行负载均衡。</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elastic<span class="token punctuation">-</span>cluster<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> 130<span class="token punctuation">-</span>node<span class="token punctuation">-</span>client<span class="token key atrule">network.host</span><span class="token punctuation">:</span> 192.168.70.130<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span><span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9300</span><span class="token comment"># 是否为master节点</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 是否为data节点</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"130-node-01"</span><span class="token punctuation">,</span> <span class="token string">"131-node-01"</span><span class="token punctuation">,</span><span class="token string">"132-node-01"</span><span class="token punctuation">,</span><span class="token string">"133-node-01"</span><span class="token punctuation">,</span><span class="token string">"134-node-01"</span><span class="token punctuation">,</span><span class="token string">"135-node-01"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.70.130:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.131:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.132:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.133:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.134:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.135:9201"</span><span class="token punctuation">]</span><span class="token comment"># 锁定物理内存地址，防止es内存被交换出去，也就是避免es使用swap交换分区，频繁的交换，会导致IOPS变高</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 跨域配置</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token comment"># 超出限制，清除内存已有的fielddata</span><span class="token key atrule">indices.fielddata.cache.size</span><span class="token punctuation">:</span> 30%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Master节点配置<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 这种组合表示这个节点即有成为主节点的资格，又存储数据。这个时候如果某个节点被选举成为了真正的主节点，那么他还要存储数据，这样对于这个节点的压力就比较大了。elasticsearch默认每个节点都是这样的配置，在测试环境下这样做没问题。实际工作中建议不要这样设置，这样相当于主节点和数据节点的角色混合到一块了</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elastic<span class="token punctuation">-</span>cluster<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> 130<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">01</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 192.168.70.130<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9201</span><span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9301</span><span class="token comment"># 是否为master节点</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 是否为data节点</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"130-node-01"</span><span class="token punctuation">,</span> <span class="token string">"131-node-01"</span><span class="token punctuation">,</span><span class="token string">"132-node-01"</span><span class="token punctuation">,</span><span class="token string">"133-node-01"</span><span class="token punctuation">,</span><span class="token string">"134-node-01"</span><span class="token punctuation">,</span><span class="token string">"135-node-01"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.70.130:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.131:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.132:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.133:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.134:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.135:9201"</span><span class="token punctuation">]</span><span class="token comment"># 锁定物理内存地址，防止es内存被交换出去，也就是避免es使用swap交换分区，频繁的交换，会导致IOPS变高</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 跨域配置</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token comment"># 超出限制，清除内存已有的fielddata</span><span class="token key atrule">indices.fielddata.cache.size</span><span class="token punctuation">:</span> 30%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>Data节点配置（node-02~node-05）此处以node-02为例<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 这种组合表示这个节点没有成为主节点的资格，也就不参与选举，只会存储数据。这个节点我们称为data(数据)节点。在集群中需要单独设置几个这样的节点负责存储数据，后期提供存储和查询服务。</span><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> elastic<span class="token punctuation">-</span>cluster<span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> 130<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">02</span><span class="token key atrule">network.host</span><span class="token punctuation">:</span> 192.168.70.130<span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9202</span><span class="token key atrule">transport.port</span><span class="token punctuation">:</span> <span class="token number">9302</span><span class="token comment"># 是否为master节点</span><span class="token key atrule">node.master</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span class="token comment"># 是否为data节点</span><span class="token key atrule">node.data</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"130-node-01"</span><span class="token punctuation">,</span> <span class="token string">"131-node-01"</span><span class="token punctuation">,</span><span class="token string">"132-node-01"</span><span class="token punctuation">,</span><span class="token string">"133-node-01"</span><span class="token punctuation">,</span><span class="token string">"134-node-01"</span><span class="token punctuation">,</span><span class="token string">"135-node-01"</span><span class="token punctuation">]</span><span class="token key atrule">discovery.seed_hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"192.168.70.130:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.131:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.132:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.133:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.134:9201"</span><span class="token punctuation">,</span> <span class="token string">"192.168.70.135:9201"</span><span class="token punctuation">]</span><span class="token comment"># 锁定物理内存地址，防止es内存被交换出去，也就是避免es使用swap交换分区，频繁的交换，会导致IOPS变高</span><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token comment"># 跨域配置</span><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> <span class="token string">"*"</span><span class="token comment"># 超出限制，清除内存已有的fielddata</span><span class="token key atrule">indices.fielddata.cache.size</span><span class="token punctuation">:</span> 30%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：<br><br>其他服务器配置一致<br><br>JDK下载地址：<a href="https://download.oracle.com/otn/java/jdk/8u351-b10/10e8cce67c7843478f41411b7003171c/jdk-8u351-linux-x64.tar.gz?AuthParam=1670730205_7f2b9f799e119cf35d27add28a8187cf">jdk1.8</a><br><br>OPEN JDK9及以后版本下载地址：<a href="https://jdk.java.net/archive/">JDK9及以后版本</a><br><br>Elasticsearch下载地址：<a href="https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.0.0-linux-x86_64.tar.gz">Elasticsearch7.0.0</a><br><br>ElasticStack所有软件下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#elasticsearch">Elastic Stack所有软件</a></p></blockquote></li></ul><ol start="2"><li>系统环境准备<blockquote><p>❗️ Elasticsearch部署需要在Linux中单独创建一个用户供其使用</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 创建组$ groupadd elastic# 创建用户及设置密码 -g将新建用户添加到指定分组 -p设置用户密码$ useradd elastic -g elastic -p elastic# 给目录添加权限$ chown -R elastic:elastic /opt/elastic# 关闭系统swap交换，发生系统swapping的时候ES节点的性能会非常差，也会影响节点的稳定性。所以要不惜一切代价来避免swapping。swapping会导致Java GC的周期延迟从毫秒级恶化到分钟，更严重的是会引起节点响应延迟甚至脱离集群$ swapoff -a# 设置操作系统可以无限制分配内存一个进程$ ulimit -l unlimited# 配置限制$ vim /etc/security/limits.conf# allow user 'XXX' mlockall* soft nofile 65536* hard nofile 65536* soft nproc 32000* hard nproc 32000elastic soft memlock unlimitedelastic hard memlock unlimited# 切换用户$ su elastic# 启动elastisearch$ /opt/elastic/node-01/elasticsearch7.0.0/bin/elasticsearch -d$ /opt/elastic/node-02/elasticsearch7.0.0/bin/elasticsearch -d$ /opt/elastic/node-03/elasticsearch7.0.0/bin/elasticsearch -d$ /opt/elastic/node-04/elasticsearch7.0.0/bin/elasticsearch -d$ /opt/elastic/node-05/elasticsearch7.0.0/bin/elasticsearch -d$ /opt/elastic/node-client/elasticsearch7.0.0/bin/elasticsearch -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kafka集群安装与部署</title>
      <link href="//2023/01/25/kafka-install/"/>
      <url>//2023/01/25/kafka-install/</url>
      
        <content type="html"><![CDATA[<h2 id="kafka集群安装与部署"><a href="#kafka集群安装与部署" class="headerlink" title="kafka集群安装与部署"></a>kafka集群安装与部署</h2><h3 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h3><ol><li><p>物理机配置</p><table><thead><tr><th>数量</th><th>配置</th><th>操作系统</th><th>IP地址</th></tr></thead><tbody><tr><td>3</td><td>处理器：4核心<br> 内存：16GB <br>系统盘：100GB</td><td>Linux CentOS 7.5</td><td>192.168.70.130<br>192.168.70.131<br>192.168.70.132</td></tr></tbody></table></li><li><p>hosts文件修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 部署zk集群和kafka集群，IP映射</span><span class="token comment"># 添加IP关系映射 </span>$ <span class="token builtin class-name">echo</span> <span class="token string">'192.168.70.130 kafka-zk01'</span> <span class="token operator">&gt;&gt;</span> /etc/hosts$ <span class="token builtin class-name">echo</span> <span class="token string">'192.168.70.131 kafka-zk02'</span> <span class="token operator">&gt;&gt;</span> /etc/hosts$ <span class="token builtin class-name">echo</span> <span class="token string">'192.168.70.132 kafka-zk03'</span> <span class="token operator">&gt;&gt;</span> /etc/hosts<span class="token comment"># 查看添加映射内容</span>$ <span class="token function">cat</span> /etc/hosts<span class="token number">192.168</span>.70.130  kafka-zk01<span class="token number">192.168</span>.70.131  kafka-zk02<span class="token number">192.168</span>.70.132  kafka-zk03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="二、集群部署"><a href="#二、集群部署" class="headerlink" title="二、集群部署"></a>二、集群部署</h3><ol><li><p>基础环境初始化</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建目录用于下载文件，后面文件下载均在此目录下，可以根据自己习惯操作</span>$ <span class="token function">mkdir</span> -p /home/software$ <span class="token builtin class-name">cd</span> /home/software<span class="token comment"># 安装JDK</span><span class="token comment"># 下载JDK</span>$ <span class="token function">wget</span> https://download.oracle.com/otn/java/jdk/8u351-b10/10e8cce67c7843478f41411b7003171c/jdk-8u351-linux-x64.tar.gz?AuthParam<span class="token operator">=</span>1670730205_7f2b9f799e119cf35d27add28a8187cf<span class="token comment"># 解压jdk文件 tar</span>$ <span class="token function">tar</span> -zxvf jdk-8u351-linux-x64.tar.gz<span class="token comment"># 查看当前机器是否安装过jdk</span>$ <span class="token function">rpm</span> -qa <span class="token operator">|</span><span class="token function">grep</span> java<span class="token comment"># 删除以java开头的文件</span>$ <span class="token function">rpm</span> -e --nodeps java*<span class="token comment"># 删除完毕后可以输入以下命令确认是否还存在，如果提示command找不到，说明移除完成</span>$ java -version<span class="token comment"># 配置JDK</span>$ <span class="token function">vim</span> /etc/profile<span class="token comment"># 在最后一行添加如下内容</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/home/local/java/jdk1.8.0_271<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token environment constant">$PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar<span class="token comment"># 保存内容</span>按下esc键，操作:wq保存文件内容<span class="token comment"># 重新加载文件，使其生效</span>$ <span class="token builtin class-name">source</span> /etc/profile<span class="token comment"># 验证安装是否成功，如果命令正常说明已经成功</span>$ java -version <span class="token comment"># 创建kafka集群部署目录</span>$ <span class="token function">mkdir</span> /opt/kafka<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>安装Zookeeper</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 下载zookeeper</span>$ <span class="token function">wget</span> https://dlcdn.apache.org/zookeeper/zookeeper-3.8.0/apache-zookeeper-3.8.0-bin.tar.gz<span class="token comment"># 解压zookeeper</span>$ <span class="token function">tar</span> -xvzf apache-zookeeper-3.8.0-bin.tar.gz<span class="token comment"># 将zookeeper移动到刚刚创建的目录/opt/kafka</span>$ <span class="token function">mv</span> ./apache-zookeeper-3.8.0-bin /opt/kafka/zookeeper-3.8.0<span class="token comment"># 创建数据目录</span>$ <span class="token function">mkdir</span> /opt/kafka/zookeeper-data<span class="token comment"># 创建myid文件</span>$ <span class="token function">touch</span>  /opt/kafka/zookeeper-data/myid<span class="token comment"># 数据目录写入zookeeper的ID，如果是第一台机器则在这里写1，后续机器依次按顺序写入2...</span><span class="token builtin class-name">echo</span> <span class="token string">"1"</span> <span class="token operator">&gt;</span> /opt/kafka/zookeeper-data/myid<span class="token comment"># 查看myid文件中的数据</span><span class="token function">cat</span> /opt/kafka/zookeeper-data/myid<span class="token number">1</span><span class="token comment"># 进入zookeeper配置文件所在目录</span>$ <span class="token builtin class-name">cd</span> /opt/kafka/zookeeper-3.8.0/conf$ <span class="token function">cp</span> zoo_sample.cfg zoo.cfg<span class="token comment"># 修改zoo.cfg配置文件</span><span class="token comment"># 修改dataDir的配置，将其设置为zk的数据地址</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/kafka/zookeeper-data<span class="token comment"># 增加ZK集群之间的交互配置。此处server.1后⾯的1，必须要和myid中的输⼊数字对应上。</span>server.1<span class="token operator">=</span>kafka-zk01:2888:3888server.2<span class="token operator">=</span>kafka-zk02:2888:3888server.3<span class="token operator">=</span>kafka-zk03:2888:3888<span class="token comment"># 进入zookeeper的bin目录</span>$ <span class="token builtin class-name">cd</span> /opt/kafka/zookeeper-3.8.0/bin<span class="token comment"># 启动命令</span>$ ./zkServer.sh start<span class="token comment"># 停止命令</span>$ ./zkServer.sh stop<span class="token comment"># 查看状态命令,会看到如下内容</span>$ ./zkServer.sh statusZooKeeper JMX enabled by defaultUsing config: /opt/kafka/zookeeper-3.8.0/bin/<span class="token punctuation">..</span>/conf/zoo.cfgMode: leader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：此处为集群部署，重复以上步骤，注意myid文件的修改</p></blockquote></li><li><p>安装Kafka</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 下载kafka</span>$ <span class="token function">wget</span> https://downloads.apache.org/kafka/3.3.1/kafka_2.12-3.3.1.tgz<span class="token comment"># 解压kafka</span>$ <span class="token function">tar</span> -xzf kafka_2.12-3.3.1.tgz<span class="token comment"># 将kafka移动到刚刚创建的目录/opt/kafka</span>$ <span class="token function">mv</span> ./kafka_2.12-3.3.1 /opt/kafka/kafka_2.12-3.3.1<span class="token comment"># 创建数据目录</span>$ <span class="token function">mkdir</span> /opt/kafka/kafka-data<span class="token comment"># 进入kafka的配置文件所在目录</span>$ <span class="token builtin class-name">cd</span> /opt/kafka/kafka_2.12-3.3.1/config<span class="token comment"># 修改server.properties文件</span><span class="token comment"># 第⼀台机器设置为1，第⼆台设置为2，依次类推</span>broker.id<span class="token operator">=</span><span class="token number">1</span> <span class="token comment"># 允许删除Topic</span>delete.topic.enable<span class="token operator">=</span>true <span class="token comment"># 允许⾃动创建Topic，如果没有部署Kafka管控平台，那么建议开启Topic的⾃动创建以省略单独⼿动创建Topic的麻烦过程</span>auto.create.topics.enable<span class="token operator">=</span>true <span class="token comment"># 该机器的服务地址,即当前服务器地址</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://kafka-zk01:9092 <span class="token comment"># 数据⽬录，可⾃定义修改</span>log.dirs<span class="token operator">=</span>/home/kafka/kafka-data <span class="token comment"># 如果开启了Topic⾃动创建，同时机器&gt;=3台，那么分区数建议默认3个，副本建议2个，以保证可靠性</span>num.partitions<span class="token operator">=</span><span class="token number">3</span>default.replication.factor<span class="token operator">=</span><span class="token number">2</span><span class="token comment"># zookeeper集群地址 后⾯/kafka_3_4_1 标识的是Zookeeper中的下⼀层⽬录kafka_3_4_1作为kafka的元信息存储地</span>zookeeper.connect<span class="token operator">=</span>kafka-zk01:2181,kafka-zk02:2181,kafka-zk03:2181/kafka_3_4_1<span class="token comment"># 进入kafka的bin目录</span>$ <span class="token builtin class-name">cd</span> /opt/kafka/kafka_2.12-3.3.1/bin<span class="token comment"># 启动命令</span>$ <span class="token function">nohup</span> ./kafka-server-start.sh <span class="token punctuation">..</span>/config/server.properties <span class="token operator">&gt;</span> /dev/null <span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment"># 检查是否正常启动，通过检查../logs/server.log⾥⾯是否有started⽇志，如果有的话，那么就启动成功了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>备注：此处为集群部署，重复以上步骤，注意配置文件中的broker.id以及listeners需要调整</p></blockquote></li><li><p>验证</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 进入kafka的bin目录</span>$ <span class="token builtin class-name">cd</span> /opt/kafka/kafka_2.12-3.3.1/bin<span class="token comment"># 生产消息测试</span>$ ./kafka-console-producer.sh --bootstrap-server kafka-zk01:9092,kafka-zk02:9092,kafka-zk03:9092 --topic <span class="token builtin class-name">test</span><span class="token comment"># 消费消息测试</span>$ ./kafka-console-consumer.sh --bootstrap-server kafka-zk01:9092,kafka-zk02:9092,kafka-zk03:9092 --topic <span class="token builtin class-name">test</span> --group consume_test --property enable.auto.commit<span class="token operator">=</span>true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基础</title>
      <link href="//2021/11/08/redis/"/>
      <url>//2021/11/08/redis/</url>
      
        <content type="html"><![CDATA[<h2 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h2><p><a href="http://redisdoc.com/">Redis学习参考网站</a></p><h4 id="1-数据类型及基本操作指令"><a href="#1-数据类型及基本操作指令" class="headerlink" title="1. 数据类型及基本操作指令"></a>1. 数据类型及基本操作指令</h4><blockquote><ul><li>String </li><li>Hash</li><li>List</li><li>Set</li><li>Zset</li></ul></blockquote><ul><li><p>String操作</p><ul><li><p>基础指令</p><ul><li><a href="http://redisdoc.com/string/set.html">SET</a></li><li><a href="http://redisdoc.com/string/setnx.html">SETNX</a></li><li><a href="http://redisdoc.com/string/setex.html">SETEX</a></li><li><a href="http://redisdoc.com/string/psetex.html">PSETEX</a></li><li><a href="http://redisdoc.com/string/get.html">GET</a></li><li><a href="http://redisdoc.com/string/getset.html">GETSET</a></li><li><a href="http://redisdoc.com/string/strlen.html">STRLEN</a></li><li><a href="http://redisdoc.com/string/append.html">APPEND</a></li><li><a href="http://redisdoc.com/string/setrange.html">SETRANGE</a></li><li><a href="http://redisdoc.com/string/getrange.html">GETRANGE</a></li><li><a href="http://redisdoc.com/string/incr.html">INCR</a></li><li><a href="http://redisdoc.com/string/incrby.html">INCRBY</a></li><li><a href="http://redisdoc.com/string/incrbyfloat.html">INCRBYFLOAT</a></li><li><a href="http://redisdoc.com/string/decr.html">DECR</a></li><li><a href="http://redisdoc.com/string/decrby.html">DECRBY</a></li><li><a href="http://redisdoc.com/string/mset.html">MSET</a></li><li><a href="http://redisdoc.com/string/msetnx.html">MSETNX</a></li><li><a href="http://redisdoc.com/string/mget.html">MGET</a></li></ul></li><li><p>incr指令</p><ul><li><p>用途：分布式ID、计数器</p></li><li><p>setnx 如果不存在则存入，否则存入失败</p><ul><li>用途：锁（互斥标志）</li><li>问题：如果并发了怎么办？不会存在并发，因为命令执行是单线程，只要能保证抢标记</li></ul></li></ul></li><li><p>场景</p><ul><li>缓存，存储session</li><li>分布式锁，单线程</li><li>计数器，分布式ID</li><li>问题：死锁（锁 必须得有 有效期）</li></ul>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 伪代码</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span> <span class="token comment">// 拿到锁</span>     <span class="token punctuation">{</span>       <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">// 系统挂了</span>       <span class="token comment">// 设置过期时间 该处逻辑不会被执行</span>     <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>Hash操作</p><ul><li><p>基础指令</p><ul><li><a href="http://redisdoc.com/hash/hset.html">HSET</a></li><li><a href="http://redisdoc.com/hash/hsetnx.html">HSETNX</a></li><li><a href="http://redisdoc.com/hash/hget.html">HGET</a></li><li><a href="http://redisdoc.com/hash/hexists.html">HEXISTS</a></li><li><a href="http://redisdoc.com/hash/hdel.html">HDEL</a></li><li><a href="http://redisdoc.com/hash/hlen.html">HLEN</a></li><li><a href="http://redisdoc.com/hash/hstrlen.html">HSTRLEN</a></li><li><a href="http://redisdoc.com/hash/hincrby.html">HINCRBY</a></li><li><a href="http://redisdoc.com/hash/hincrbyfloat.html">HINCRBYFLOAT</a></li><li><a href="http://redisdoc.com/hash/hmset.html">HMSET</a></li><li><a href="http://redisdoc.com/hash/hmget.html">HMGET</a></li><li><a href="http://redisdoc.com/hash/hkeys.html">HKEYS</a></li><li><a href="http://redisdoc.com/hash/hvals.html">HVALS</a></li><li><a href="http://redisdoc.com/hash/hgetall.html">HGETALL</a></li><li><a href="http://redisdoc.com/hash/hscan.html">HSCAN</a></li></ul></li><li><p>特点：结构型数据，统计数据</p><p>商品 浏览数、下单数</p></li><li><p>场景</p><ul><li><p>购物车</p></li><li><p>可以作为分布式锁，并且可以做的更好</p></li><li><p>能做重入锁，重入：同一个线程能够多次加锁 , 类似大门上锁，上了多把锁，只有自己才有钥匙解锁</p><p>必要因素：1.互斥（key） 2.线程ID（file） 3.重入次数（value）</p></li></ul></li></ul></li><li><p>List 操作</p><ul><li>基础指令<ul><li><a href="http://redisdoc.com/list/lpush.html">LPUSH</a></li><li><a href="http://redisdoc.com/list/lpushx.html">LPUSHX</a></li><li><a href="http://redisdoc.com/list/rpush.html">RPUSH</a></li><li><a href="http://redisdoc.com/list/rpushx.html">RPUSHX</a></li><li><a href="http://redisdoc.com/list/lpop.html">LPOP</a></li><li><a href="http://redisdoc.com/list/rpop.html">RPOP</a></li><li><a href="http://redisdoc.com/list/rpoplpush.html">RPOPLPUSH</a></li><li><a href="http://redisdoc.com/list/lrem.html">LREM</a></li><li><a href="http://redisdoc.com/list/llen.html">LLEN</a></li><li><a href="http://redisdoc.com/list/lindex.html">LINDEX</a></li><li><a href="http://redisdoc.com/list/linsert.html">LINSERT</a></li><li><a href="http://redisdoc.com/list/lset.html">LSET</a></li><li><a href="http://redisdoc.com/list/lrange.html">LRANGE</a></li><li><a href="http://redisdoc.com/list/ltrim.html">LTRIM</a></li><li><a href="http://redisdoc.com/list/blpop.html">BLPOP</a></li><li><a href="http://redisdoc.com/list/brpop.html">BRPOP</a></li><li><a href="http://redisdoc.com/list/brpoplpush.html">BRPOPLPUSH</a></li></ul></li><li>特点：有序的、元素可以重复的集合</li><li>场景：消息队列（比如：blpop），不建议使用，作为消息队列没有任何回应，Redis AP模式，数据可靠性不</li></ul><blockquote><p>说明：</p><p>AP模式：优先保证可用性</p><p>CP模式：优先保证数据一致性</p><p>一致性(Consistency) (等同于所有节点访问同一份最新的数据副本)<br>可用性(Availability)(每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据)<br>分区容错性(Partition tolerance)(以实际效果而言，分区相当于对通信的时限要求。系统如果不能在时限内达成数据一致性，就意味着发生了分区的情况，必须就当前操作在C和A之间做出选择)</p></blockquote></li><li><p>Set操作</p><ul><li>基础指令<ul><li><a href="http://redisdoc.com/set/sadd.html">SADD</a></li><li><a href="http://redisdoc.com/set/sismember.html">SISMEMBER</a></li><li><a href="http://redisdoc.com/set/spop.html">SPOP</a></li><li><a href="http://redisdoc.com/set/srandmember.html">SRANDMEMBER</a></li><li><a href="http://redisdoc.com/set/srem.html">SREM</a></li><li><a href="http://redisdoc.com/set/smove.html">SMOVE</a></li><li><a href="http://redisdoc.com/set/scard.html">SCARD</a></li><li><a href="http://redisdoc.com/set/smembers.html">SMEMBERS</a></li><li><a href="http://redisdoc.com/set/sscan.html">SSCAN</a></li><li><a href="http://redisdoc.com/set/sinter.html">SINTER</a></li><li><a href="http://redisdoc.com/set/sinterstore.html">SINTERSTORE</a></li><li><a href="http://redisdoc.com/set/sunion.html">SUNION</a></li><li><a href="http://redisdoc.com/set/sunionstore.html">SUNIONSTORE</a></li><li><a href="http://redisdoc.com/set/sdiff.html">SDIFF</a></li><li><a href="http://redisdoc.com/set/sdiffstore.html">SDIFFSTORE</a></li></ul></li><li>特点：无序的、元素不可以重复的集合</li><li>场景：<ul><li>抽奖 随机弹出（移除[SPOP]和不移除奖池[SRANDMEMBER]）</li><li>交集、差集、并集</li><li>点赞</li></ul></li></ul></li><li><p>ZSet操作</p><ul><li>基础指令<ul><li><a href="http://redisdoc.com/sorted_set/zadd.html">ZADD</a></li><li><a href="http://redisdoc.com/sorted_set/zscore.html">ZSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zincrby.html">ZINCRBY</a></li><li><a href="http://redisdoc.com/sorted_set/zcard.html">ZCARD</a></li><li><a href="http://redisdoc.com/sorted_set/zcount.html">ZCOUNT</a></li><li><a href="http://redisdoc.com/sorted_set/zrange.html">ZRANGE</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrange.html">ZREVRANGE</a></li><li><a href="http://redisdoc.com/sorted_set/zrangebyscore.html">ZRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrangebyscore.html">ZREVRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrank.html">ZRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zrevrank.html">ZREVRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zrem.html">ZREM</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebyrank.html">ZREMRANGEBYRANK</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebyscore.html">ZREMRANGEBYSCORE</a></li><li><a href="http://redisdoc.com/sorted_set/zrangebylex.html">ZRANGEBYLEX</a></li><li><a href="http://redisdoc.com/sorted_set/zlexcount.html">ZLEXCOUNT</a></li><li><a href="http://redisdoc.com/sorted_set/zremrangebylex.html">ZREMRANGEBYLEX</a></li><li><a href="http://redisdoc.com/sorted_set/zscan.html">ZSCAN</a></li><li><a href="http://redisdoc.com/sorted_set/zunionstore.html">ZUNIONSTORE</a></li><li><a href="http://redisdoc.com/sorted_set/zinterstore.html">ZINTERSTORE</a></li></ul></li><li>特点：有序的、元素不可以重复的集合</li><li>排序：如果score相同，用key的ASCII码排序</li><li>场景：排行榜</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker Desktop(WSL2)修改镜像存储位置</title>
      <link href="//2021/10/24/windows-wsl-partition/"/>
      <url>//2021/10/24/windows-wsl-partition/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker-Desktop-WSL2-修改镜像存储位置"><a href="#Docker-Desktop-WSL2-修改镜像存储位置" class="headerlink" title="Docker Desktop(WSL2)修改镜像存储位置"></a>Docker Desktop(WSL2)修改镜像存储位置</h2><p>此处我使用的是WSL2的版本，因此docker desktop在安装的时候创建两个wsl子系统，分别为docker-desktop和docker-desktop-data</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看已创建子系统</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl -l -v --all  NAME                   STATE           VERSION* docker-desktop         Running         <span class="token number">2</span>  docker-desktop-data    Running         <span class="token number">2</span><span class="token comment"># 立即终止所有正在运行的发行版</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --shutdown<span class="token comment"># 导出wsl子系统镜像</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --export docker-desktop I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop<span class="token punctuation">\</span>docker-desktop.tarC:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --export docker-desktop-data I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop-data<span class="token punctuation">\</span>docker-desktop-data.tar<span class="token comment"># 删除现有的wsl子系统</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --unregister docker-desktopC:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --unregister docker-desktop-data<span class="token comment"># 重新创建wsl子系统</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --import docker-desktop I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop<span class="token punctuation">\</span>docker-desktop.tar --version <span class="token number">2</span>C:<span class="token punctuation">\</span>Users<span class="token punctuation">\</span>xxxxx<span class="token operator">&gt;</span>wsl --import docker-desktop-data I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop-data I:<span class="token punctuation">\</span>docker<span class="token punctuation">\</span>wsl<span class="token punctuation">\</span>docker-desktop-data<span class="token punctuation">\</span>docker-desktop-data.tar --version <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明（这两个wsl子系统默认存放在系统盘）：</p><p>默认存储位置：C:\Users\xxxxx\AppData\Local\Docker\wsl</p><p>docker-desktop：存放程序</p><p>docker-desktop-data：存放镜像</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker的Redis集群搭建</title>
      <link href="//2021/06/26/docker-redis-cluster/"/>
      <url>//2021/06/26/docker-redis-cluster/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Docker的Redis集群搭建"><a href="#基于Docker的Redis集群搭建" class="headerlink" title="基于Docker的Redis集群搭建"></a>基于Docker的Redis集群搭建</h2><h4 id="1-拉取镜像"><a href="#1-拉取镜像" class="headerlink" title="1. 拉取镜像"></a>1. 拉取镜像</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker pull redis:6.2.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214403717.png" alt="image-20210626214403717"></h4><h4 id="2-创建Redis容器"><a href="#2-创建Redis容器" class="headerlink" title="2.创建Redis容器"></a>2.创建Redis容器</h4><blockquote><p>创建三个Redis容器：</p><ul><li>redis-node01:6379</li><li>redis-node02:6380</li><li>redis-node03:6380</li></ul></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker create --name redis-node01 -v /data/redis-data/node1:/data -p 6379:6379 redis:6.2.4 --cluster-enabled yes --cluster-config-file redis-node01.conf$ docker create --name redis-node02 -v /data/redis-data/node2:/data -p 6380:6379 redis:6.2.4 --cluster-enabled yes --cluster-config-file redis-node02.conf$ docker create --name redis-node03 -v /data/redis-data/node3:/data -p 6381:6379 redis:6.2.4 --cluster-enabled yes --cluster-config-file redis-node03.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214440775.png" alt="image-20210626214440775"></p><h4 id="3-启动Redis集群"><a href="#3-启动Redis集群" class="headerlink" title="3. 启动Redis集群"></a>3. 启动Redis集群</h4><ul><li><p>启动容器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker start redis-node01 redis-node02 redis-node03<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214325367.png" alt="image-20210626214325367"></p></li><li><p>检查容器启动情况</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker ps -a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214301278.png" alt="image-20210626214301278"></p></li><li><p>查看Redis在Docker中分配的ip</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ docker inspect redis-node0$ docker inspect redis-node02$ docker inspect redis-node03<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214231630.png" alt="image-20210626214231630"></p></li><li><p>得到ip后，在某个容器中进行集群组建</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># 此处进入node01$ docker exec -it redis-node01 /bin/bash# 执行组建集群命令（ip根据自己的信息来确定）$ redis-cli --cluster create 172.17.0.2:6379 172.17.0.3:6379 172.17.0.4:6379 --cluster-replicas 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://github.com/Nicholas2015/image/tree/master/redis/image-20210626214558417.png" alt="image-20210626214558417"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git本地项目上传</title>
      <link href="//2021/06/26/git-local-project-upload/"/>
      <url>//2021/06/26/git-local-project-upload/</url>
      
        <content type="html"><![CDATA[<p>1、（先进入项目文件夹）通过命令 git init 把这个目录变成git可以管理的仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、把文件添加到版本库中，使用命令 git add .添加到暂存区里面去，不要忘记后面的小数点“.”，意为添加文件夹下的所有文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、用命令 git commit告诉Git，把文件提交到仓库。引号内为提交说明</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">'first commit'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、关联到远程库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin 你的远程库地址<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/xxx/xxx-demo.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、获取远程库与本地同步合并（如果远程库不为空必须做这一步，否则后面的提交会失败）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> pull --rebase origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程。执行此命令后会要求输入用户名、密码，验证通过后即开始上传。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> push -u origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、状态查询命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>备：详细请参考 <a href="http://www.cnblogs.com/tugenhua0707/p/4050072.html">http://www.cnblogs.com/tugenhua0707/p/4050072.html</a></p><p> <img src="https://images2018.cnblogs.com/blog/359884/201711/359884-20171128123923050-1074438610.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes环境搭建</title>
      <link href="//2021/06/26/kubernetes-install-01/"/>
      <url>//2021/06/26/kubernetes-install-01/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境搭建前期准备"><a href="#1-环境搭建前期准备" class="headerlink" title="1. 环境搭建前期准备"></a>1. 环境搭建前期准备</h2><h3 id="组件版本"><a href="#组件版本" class="headerlink" title="组件版本"></a>组件版本</h3><ul><li>Kubernetes 1.11.2</li><li>Docker 18.06.0-ce</li><li>Etcd v3.3.9</li><li>Flanneld v0.10.0</li><li>TLS 认证通信（所有组件，如etcd、kubernetes master 和node）</li><li>RBAC 授权</li><li>kubelet TLS Bootstrapping</li><li>kubedns v1.14.10、dashboard v1.10.0、heapster v1.5.4等插件</li></ul><h3 id="etcd-集群-amp-amp-k8s-master-机器-amp-amp-k8s-node-机器"><a href="#etcd-集群-amp-amp-k8s-master-机器-amp-amp-k8s-node-机器" class="headerlink" title="etcd 集群 &amp;&amp; k8s master 机器 &amp;&amp; k8s node 机器"></a>etcd 集群 &amp;&amp; k8s master 机器 &amp;&amp; k8s node 机器</h3><ul><li>master01：ip1</li><li>node01: ip2</li><li>node02: ip3</li><li>node03: ip4</li></ul><h3 id="集群环境变量"><a href="#集群环境变量" class="headerlink" title="集群环境变量"></a>集群环境变量</h3><p>后续部署将会使用到的全局变量，定义如下（根据自己的机器、网络修改）：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># TLS Bootstrapping 使用的Token，可以使用命令 head -c 16 /dev/urandom | od -An -t x | tr -d ' ' 生成</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">BOOTSTRAP_TOKEN</span><span class="token operator">=</span><span class="token string">"8981b594122ebed7596f1d3b69c78223"</span><span class="token comment"># 建议使用未用的网段来定义服务网段和Pod 网段</span><span class="token comment"># 服务网段(Service CIDR)，部署前路由不可达，部署后集群内部使用IP:Port可达</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">SERVICE_CIDR</span><span class="token operator">=</span><span class="token string">"10.254.0.0/16"</span><span class="token comment"># Pod 网段(Cluster CIDR)，部署前路由不可达，部署后路由可达(flanneld 保证)</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CLUSTER_CIDR</span><span class="token operator">=</span><span class="token string">"172.30.0.0/16"</span><span class="token comment"># 服务端口范围(NodePort Range)</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">NODE_PORT_RANGE</span><span class="token operator">=</span><span class="token string">"30000-32766"</span><span class="token comment"># etcd集群服务地址列表</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">ETCD_ENDPOINTS</span><span class="token operator">=</span><span class="token string">"https://ip1:2379,https://ip2:2379,https://ip3:2379"</span><span class="token comment"># flanneld 网络配置前缀</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">FLANNEL_ETCD_PREFIX</span><span class="token operator">=</span><span class="token string">"/kubernetes/network"</span><span class="token comment"># kubernetes 服务IP(预先分配，一般为SERVICE_CIDR中的第一个IP)</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CLUSTER_KUBERNETES_SVC_IP</span><span class="token operator">=</span><span class="token string">"10.254.0.1"</span><span class="token comment"># 集群 DNS 服务IP(从SERVICE_CIDR 中预先分配)</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CLUSTER_DNS_SVC_IP</span><span class="token operator">=</span><span class="token string">"10.254.0.2"</span><span class="token comment"># 集群 DNS 域名</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">CLUSTER_DNS_DOMAIN</span><span class="token operator">=</span><span class="token string">"cluster.local."</span><span class="token comment"># MASTER API Server 地址</span>$ <span class="token builtin class-name">export</span> <span class="token assign-left variable">MASTER_URL</span><span class="token operator">=</span><span class="token string">"k8s-api.virtual.local"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-创建CA-证书和密钥"><a href="#2-创建CA-证书和密钥" class="headerlink" title="2. 创建CA 证书和密钥"></a>2. 创建CA 证书和密钥</h2><p><code>kubernetes</code> 系统各个组件需要使用<code>TLS</code>证书对通信进行加密，这里我们使用<code>CloudFlare</code>的PKI 工具集<a href="https://pkg.cfssl.org/">cfssl</a> 来生成Certificate Authority(CA) 证书和密钥文件， CA 是自签名的证书，用来签名后续创建的其他TLS 证书。</p><h3 id="安装-CFSSL"><a href="#安装-CFSSL" class="headerlink" title="安装 CFSSL"></a>安装 CFSSL</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ <span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssl_linux-amd64$ <span class="token function">chmod</span> +x cfssl_linux-amd64$ <span class="token function">sudo</span> <span class="token function">mv</span> cfssl_linux-amd64 /usr/k8s/bin/cfssl$ <span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64$ <span class="token function">chmod</span> +x cfssljson_linux-amd64$ <span class="token function">sudo</span> <span class="token function">mv</span> cfssljson_linux-amd64 /usr/k8s/bin/cfssljson$ <span class="token function">wget</span> https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64$ <span class="token function">chmod</span> +x cfssl-certinfo_linux-amd64$ <span class="token function">sudo</span> <span class="token function">mv</span> cfssl-certinfo_linux-amd64 /usr/k8s/bin/cfssl-certinfo$ <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/usr/k8s/bin:<span class="token environment constant">$PATH</span>$ <span class="token function">mkdir</span> ssl <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> ssl$ cfssl print-defaults config <span class="token operator">&gt;</span> config.json$ cfssl print-defaults csr <span class="token operator">&gt;</span> csr.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>借鉴于<a href="https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster">https://blog.qikqiak.com/post/manual-install-high-available-kubernetes-cluster</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL免安装版部署</title>
      <link href="//2021/06/22/mysql-install-windows/"/>
      <url>//2021/06/22/mysql-install-windows/</url>
      
        <content type="html"><![CDATA[<h2 id="MySQL免安装版部署（Windows）"><a href="#MySQL免安装版部署（Windows）" class="headerlink" title="MySQL免安装版部署（Windows）"></a>MySQL免安装版部署（Windows）</h2><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p><a href="https://downloads.mysql.com/archives/community/">MySQL下载地址</a></p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>解压压缩包，并新建my.ini文件以代替my-default.ini文件</p></li><li><p>my.ini文件内容如下：</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token selector">[mysql]</span><span class="token comment">#设置mysql客户端默认字符集</span><span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token selector">[mysqld]</span><span class="token comment">#设置3306端口</span><span class="token constant">port</span> <span class="token attr-value"><span class="token punctuation">=</span> 3306 </span><span class="token comment">#设置mysql的安装目录</span><span class="token constant">basedir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\\Program Files\\Mysql</span><span class="token comment">#设置mysql数据库的数据的存放目录</span><span class="token constant">datadir</span><span class="token attr-value"><span class="token punctuation">=</span>D:\\Program Files\\Mysql\\data</span><span class="token comment">#允许最大连接数</span><span class="token constant">max_connections</span><span class="token attr-value"><span class="token punctuation">=</span>200</span><span class="token comment">#服务端使用的字符集默认为8比特编码的latin1字符集</span><span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span><span class="token comment">#创建新表时将使用的默认存储引擎</span><span class="token constant">default-storage-engine</span><span class="token attr-value"><span class="token punctuation">=</span>INNODB</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>以管理员身份打开cmd命令窗口，进入到mysql安装目录中，执行如下命令：</p></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 初始化,此时mysql安装目录下已经自动创建了data文件夹。</span>mysqld --initialize-insecure --user<span class="token operator">=</span>mysql<span class="token comment"># 安装mysql服务，此处注意：是mysqld不是mysql</span>mysqld <span class="token function">install</span><span class="token comment"># 启动mysql服务</span>net start mysql<span class="token comment"># 登录连接mysql客户端</span>mysql -u root -p<span class="token comment"># 进入mysql控制台,修改root用户密码</span>alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'新密码'</span><span class="token comment"># -------其它命令，此处不执行---------</span><span class="token comment"># 停止mysql服务</span>net stop mysql<span class="token comment"># 删除已安装的mysql服务</span>mysqld remove<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//2021/01/01/hello-world/"/>
      <url>//2021/01/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java拷贝技术探究</title>
      <link href="//2014/06/26/java-clone/"/>
      <url>//2014/06/26/java-clone/</url>
      
        <content type="html"><![CDATA[<h4 id="浅拷贝和深拷贝的区别"><a href="#浅拷贝和深拷贝的区别" class="headerlink" title="浅拷贝和深拷贝的区别"></a>浅拷贝和深拷贝的区别</h4><blockquote><p>浅拷贝： 对当前对象进行克隆，并克隆该对象所包含的8种基本数据类型和String类型的属性（对当前对象拷贝一份并重新分配内存，即产生了新的对象）。但如果被克隆的对象中包含除了8种数据类型和String类型外的其他类型的属性，浅拷贝并不会克隆这些属性（即不会为这些属性分配内存，而是引用原来对象中的属性）</p><p>深拷贝： 深拷贝是在浅拷贝的基础上，递归地克隆除了8种基本类型和String类型之外的属性（即为这些属性重新分配内存而非引用原来对象中的属性）</p></blockquote><h4 id="浅拷贝（Shallow-Clone）"><a href="#浅拷贝（Shallow-Clone）" class="headerlink" title="浅拷贝（Shallow Clone）"></a>浅拷贝（Shallow Clone）</h4><h5 id="构建实体类"><a href="#构建实体类" class="headerlink" title="构建实体类"></a>构建实体类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nicholas<span class="token punctuation">.</span>example<span class="token punctuation">.</span>model</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token comment">/** * @author Nicholas */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 属性信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="浅拷贝测试"><a href="#浅拷贝测试" class="headerlink" title="浅拷贝测试"></a>浅拷贝测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nicholas<span class="token punctuation">.</span>example<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloningTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"NanJing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> cloneUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> origin<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查user和cloneUser的属性是否一致</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser: "</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user and cloneUser === test: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> cloneUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查user和cloneUser的props是否一致</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user props: "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser props: "</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user and cloneUser props === test: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让我们看看对默认克隆的影响</span>        <span class="token comment">// 修改user对象的props</span>        origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"CTO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"ChangZhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser props:"</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改user的name</span>        origin<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"SunChunYang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser name:"</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Develop<span class="token punctuation">\</span>env<span class="token punctuation">\</span>java<span class="token punctuation">\</span>jdk-11.0.2<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>java.exe <span class="token punctuation">..</span>.com.example.demo.model.CloningTestuser: User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>Nicholas, <span class="token assign-left variable">props</span><span class="token operator">=</span><span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span><span class="token punctuation">)</span>cloneUser: User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>Nicholas, <span class="token assign-left variable">props</span><span class="token operator">=</span><span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span><span class="token punctuation">)</span>user and cloneUser <span class="token operator">==</span><span class="token operator">=</span> test: <span class="token boolean">false</span>user props: <span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span>cloneUser props: <span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span>user and cloneUser props <span class="token operator">==</span><span class="token operator">=</span> test: <span class="token boolean">true</span>cloneUser props:<span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">title</span><span class="token operator">=</span>CTO, <span class="token assign-left variable">city</span><span class="token operator">=</span>ChangZhou<span class="token punctuation">}</span>cloneUser name:NicholasProcess finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="深拷贝（Deep-Clone）"><a href="#深拷贝（Deep-Clone）" class="headerlink" title="深拷贝（Deep Clone）"></a>深拷贝（Deep Clone）</h4><h5 id="构建实体类-1"><a href="#构建实体类-1" class="headerlink" title="构建实体类"></a>构建实体类</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Nicholas */</span><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token annotation punctuation">@ToString</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token comment">/**     * 编号     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment">/**     * 名称     */</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">/**     * 属性信息     */</span>    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props<span class="token punctuation">;</span>    <span class="token comment">/**     * 方法一：最原始的实现方式，经过构造方法手建立     * 优势：     * 1.实现简单直观     * 2.不须要依赖额外的接口和第三方包     * 缺点：     * 1.成员变量发生变更须要修改方法，不知足开闭原则；     * 2.不具备可复用性；     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token class-name">User</span> copyUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        copyUser<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        copyUser<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key<span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Deep Copy of field by field</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            copyUser<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>hm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> copyUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token comment">/**     * 方法二：使用Object的clone方法实现     * 优势：     * 1.较方式1实现更简单，不须要关注copy细节；     * 2.不须要依赖第三方包；     * 3.不修改引用类型成员变量不须要修改代码     * 缺点：     * 1.须要实现Cloneable，重写父类clone方法，不知足里式替换；     * 2.且引用类型成员变量发生变更须要修改方法，不知足开闭原则；     * 3.不具备可复用性；     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> cloneUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> hm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> key<span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// Deep Copy of field by field</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                key <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                hm<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            cloneUser<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>hm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cloneUser<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法三：使用Java自带的流方式实现     * 优势：     * 1.不破坏类的封装，无需了解被copy对象的内部     * 2.不须要依赖第三方包     * 3.代码可复用     * 缺点：     * 1.须要实现Serializable接口，会有额外的开销     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">{</span>        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment">/**     * 方法四：使用第三方包Jackson实现     * 优势：     * 1.不破坏类的封装，无需了解被copy对象的内部     * 2.不须要实现接口     * 3.代码可复用     * 缺点：     * 1.须要依赖第三方包     * 2.内部实现复杂     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">{</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="深拷贝测试"><a href="#深拷贝测试" class="headerlink" title="深拷贝测试"></a>深拷贝测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>nicholas<span class="token punctuation">.</span>example<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloningTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>        <span class="token class-name">User</span> origin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Nicholas"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"salary"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        props<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"NanJing"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">setProps</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> cloneUser <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> origin<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查user和cloneUser的属性是否一致</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user: "</span> <span class="token operator">+</span> origin<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser: "</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user and cloneUser === test: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>origin <span class="token operator">==</span> cloneUser<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 检查user和cloneUser的props是否一致</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user props: "</span> <span class="token operator">+</span> origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser props: "</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"user and cloneUser props === test: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 让我们看看对默认克隆的影响</span>        <span class="token comment">// 修改user对象的props</span>        origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span><span class="token string">"CTO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        origin<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">,</span><span class="token string">"ChangZhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser props:"</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 修改user的name</span>        origin<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"SunChunYang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"cloneUser name:"</span> <span class="token operator">+</span> cloneUser<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结果输出-1"><a href="#结果输出-1" class="headerlink" title="结果输出"></a>结果输出</h5><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">D:<span class="token punctuation">\</span>Develop<span class="token punctuation">\</span>env<span class="token punctuation">\</span>java<span class="token punctuation">\</span>jdk-11.0.2<span class="token punctuation">\</span>bin<span class="token punctuation">\</span>java.exe <span class="token punctuation">..</span>.user: User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>Nicholas, <span class="token assign-left variable">props</span><span class="token operator">=</span><span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span><span class="token punctuation">)</span>cloneUser: User<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span>, <span class="token assign-left variable">name</span><span class="token operator">=</span>Nicholas, <span class="token assign-left variable">props</span><span class="token operator">=</span><span class="token punctuation">{</span>city<span class="token operator">=</span>NanJing, <span class="token assign-left variable">salary</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>user and cloneUser <span class="token operator">==</span><span class="token operator">=</span> test: <span class="token boolean">false</span>user props: <span class="token punctuation">{</span>salary<span class="token operator">=</span><span class="token number">10000</span>, <span class="token assign-left variable">city</span><span class="token operator">=</span>NanJing<span class="token punctuation">}</span>cloneUser props: <span class="token punctuation">{</span>city<span class="token operator">=</span>NanJing, <span class="token assign-left variable">salary</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">}</span>user and cloneUser props <span class="token operator">==</span><span class="token operator">=</span> test: <span class="token boolean">false</span>cloneUser props:<span class="token punctuation">{</span>city<span class="token operator">=</span>NanJing, <span class="token assign-left variable">salary</span><span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">}</span>cloneUser name:NicholasProcess finished with <span class="token builtin class-name">exit</span> code <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JAVA基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
